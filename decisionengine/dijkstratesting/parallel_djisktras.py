import unittest
from decisionengine.dijkstras import Dijkstras

class ParallelDjisktrasTest(unittest.TestCase):
    """
    Class that parallel djisktras with a dummy path
    """
    def setUp(self):

        # Graph with same dummy path as Djisktras shortest path
        self.g1 = { (0, 0): [((0, 1), 1)],
                    (0, 1): [((0, 0), 1)]
                    }
        
        self.g1_dummypath = {(0, 0), (0, 1)}

        # Graph with 24 Nodes
        self.g2 = {(0, 0): [((0, 1), 1), ((1, 0), 1)],
                   (0, 1): [((0, 0), 1), ((0, 2), 1)],
                   (1, 0): [((0, 0), 1), ((2, 0), 1)],
                   (0, 2): [((0, 1), 1), ((0, 3), 1)],
                   (2, 0): [((1, 0), 1), ((3, 0), 1), ((3, 1), 2)],
                   (0, 3): [((0, 2), 1), ((0, 4), 1)],
                   (3, 0): [((2, 0), 1), ((4, 0), 1)],
                   (3, 1): [((2, 0), 2)],
                   (0, 4): [((0, 3), 1), ((0, 5), 1)],
                   (4, 0): [((3, 0), 1), ((5, 0), 1)],
                   (0, 5): [((0, 4), 1), ((0, 6), 1)],
                   (5, 0): [((4, 0), 0), ((6, 0), 1), ((6, 1), 2)],
                   (0, 6): [((0, 5), 1), ((0, 7), 1)],
                   (6, 0): [((5, 0), 1), ((7, 0), 1)],
                   (6, 1): [((5, 0), 1)],
                   (0, 7): [((0, 6), 1), ((0, 8), 1)],
                   (7, 0): [((6, 0), 1), ((8, 0), 1)],
                   (0, 8): [((0, 7), 1), ((0, 9), 1)], 
                   (8, 0): [((7, 0), 1), ((9, 0), 1)],
                   (0, 9): [((0, 8), 1), ((0, 10), 1)], 
                   (9, 0): [((8, 0), 1), ((9, 1), 1), ((10, 0), 1)],
                   (9, 1): [((9, 2), 1), ((9, 4), 3)],
                   (9, 2): [((9, 1), 1)],
                   (9, 4): [((9, 1), 3)],
                   (0, 10): [((0, 9), 1)],
                   (10, 0): [((9, 0), 1), ]
                    }

        self.g2_dummypath = [((0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), 10)]

        # Graph with two direct paths
        self.g3 = { (0, 0): [((0, 2), 2), ((0, 3), 3)],
                    (0, 2): [((0, 4), 2), ((0, 6), 2)],
                    (0, 3): [((0, 0), 3), ((0, 5), 2)],
                    (0, 4): [((0, 2), 2), ((0, 6), 2) ],
                    (0, 5): [((0, 3), 2),((0, 7), 2)], 
                    (0, 6): [((0, 4), 2), ((0, 8), 2)], 
                    (0, 7): [((0, 5), 2), ((0, 9), 2)],
                    (0, 8): [((0, 6), 2), ((0, 10), 2)],
                    (0, 9): [((0, 7), 2), ((0, 10), 2)],
                    (0, 10): [((0, 8), 2), ((0, 12), 2)],
                    (0, 11): [((0, 9), 2), ((0, 13), 2)],
                    (0, 12): [((0, 10), 2), ((0, 14), 2)],
                    (0, 13): [((0, 11), 2), ((0, 15), 2)],
                    (0, 14): [((0, 16), 2), ((0, 18), 2)],
                    (0, 15): [((0, 13), 2), ((0, 17), 2)],
                    (0, 16): [((0, 14), 2), ((0, 18), 2)],
                    (0, 17): [((0, 15), 2), ((0, 19), 2)],
                    (0, 18): [((0, 20), 2), ((0, 22), 2)],
                    (0, 19): [((0, 17), 2), ((0, 21), 2)],
                    (0, 20): [((0, 18), 2), ((0, 22), 2)],
                    (0, 21): [((0, 19), 2), ((0, 23), 2)],
                    (0, 22): [((0, 20), 2), ((0, 24), 2)],
                    (0, 23): [((0, 21), 2), ((0, 25), 2)],
                    (0, 24): [((0, 22), 2), ((0, 25), 2)],
                    (0, 25): [((0, 23), 2), ((0, 24), 2)]
                    }

        self.g3_dummypath = [(0,0), (0, 2), (0, 4), (0, 6), (0, 8), (0, 10), (0, 12), (0, 14), (0, 16), (0, 18), (0, 20), (0, 22), (0, 24)]

        # Graph with 21 Nodes
        self.g4 = {(0, 0): [((0, 4), 4), ((3, 0), 3), ((0, 5), 5)],
                   (0, 4): [((0, 0), 3), ((3, 7), 6)],
                   (0, 5): [((0, 0), 5)],
                   (3, 0): [((5, 2), 5)],
                   (3, 7): [((7, 17), 14), ((7, 23), 20)],
                   (4, 8): [(0, 5)],
                   (5, 2): [((7, 9), 9)],
                   (7, 9): [((5, 2), 2), ((7, 17), 8)],
                   (7, 17): [((7, 9), 8)],
                   (7, 23): [((10, 35), 12), ((10, 42), 22)],
                   (10, 35): [((13, 50), 18)],
                   (10, 42): [((15, 70), 33)],
                   (13, 50): [((15, 60), 12)],
                   (15, 60): [((17, 70), 12), ((19, 85), 29)],
                   (15, 70): [((10, 42), 33)],
                   (16, 80): [((17, 70), 23), ((19, 85), 18), ((19, 90), 13)], 
                   (17, 70): [((19, 90), 22), ((16, 80), 11)],
                   (19, 85): [((15, 60), 29), ((16, 80), 11)],
                   (19, 90): [((20, 100), 13)],
                   (20, 100): [((23, 110), 12)],
                   (23, 110): [((25, 120), 12)],
                   (25, 120): [((28, 130), 12)],
                   (28, 130): [((25, 120), 13)]
                    }

        self.g4_dummypath = [(0, 0), (0, 5), (3,7), (7, 23), (10, 35), 
                             (13, 50), (15,60), (17,70), (19, 90), (20, 100), 
                             (23, 110), (25, 120), (28, 130)]

    def test_parallel_djisktras(self):
        """
        Testing parallel djikstras
        """

        # Not sure how parallel_djisktras 
        self.assertTrue(Dijkstras().parallel_dijkstras(self.g1, (0, 0), (0, 1), self.g1_dummypath))
        
        self.assertTrue(Dijkstras().parallel_dijkstras(self.g2, (0, 0), (10, 0), self.g2_dummypath))
        self.assertTrue(Dijkstras().parallel_dijkstras(self.g3, (0, 0), (0, 25), self.g3_dummypath))
        self.assertTrue(Dijkstras().parallel_dijkstras(self.g4, (0, 0), (28, 130), self.g4_dummypath))


if __name__ == '__main__':
    unittest.main()